---
title: Deprecating long-lived credentials for container repositories
last_reviewed_on: 2023-05-09
review_in: 3 months
---

# <%= current_page.data.title %>

To improve the security of services running on the Cloud Platform, we are removing the ability to create and use long-lived credentials, such as IAM access keys, from our modules. These are being replaced by short-lived credentials.

For container repositories, this means utilising native OpenID Connect implementations for [GitHub Actions](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect) and [CircleCI](https://circleci.com/docs/openid-connect-tokens/#authenticate-jobs-with-cloud-providers).

You should start using short-lived credentials as soon as you can. Long-lived credentials will be entirely removed from the container repository module in summer 2023 (exact date will be communicated at a later time).

## Migrating to short-lived credentials for GitHub Actions

If you use GitHub Actions to push your Docker image to a container repository on the Cloud Platform, you need to update your namespace and your GitHub Actions workflow.

To use short-lived credentials in GitHub Actions, complete the following two steps:

1. Raise and merge a PR that adds the following attributes to your container repository, which is typically in `resources/ecr.tf` in your namespace:

    ```hcl
    module "ecr" {
      ...
      # enable the oidc implementation for GitHub
      oidc_providers = ["github"]

      # set this if you use one GitHub repository to push to multiple container repositories
      # this ensures the variable key used in the workflow is unique
      github_actions_prefix = "production"
      ...
    }
    ```

    As soon as this PR is merged, you will receive three new variables in GitHub Actions or in your GitHub Actions environments. These will be `ECR_REGION`, `ECR_REPOSITORY`, and `ECR_ROLE_TO_ASSUME`. If you have provided a prefix, these variables will be prefixed.

2. Update your GitHub Actions workflow to use short-lived credentials

    As each team has a different GitHub Actions workflow, this example shows a full implementation of using short-lived credentials to push to your container repository. Inline comments tell you what each part of the workflow is for.

    You should adapt your workflow to include the following permissions, and actions:

    ```yaml
    on:
      push:
        branches: [main]

    jobs:
      ecr:
        runs-on: ubuntu-latest
        permissions:
          id-token: write # This is required for requesting the JWT
          contents: read  # This is required for actions/checkout
        steps:
          # Checkout GitHub repository
          - uses: actions/checkout@v3

          # Assume role in Cloud Platform
          - uses: aws-actions/configure-aws-credentials@v2
            with:
              role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
              aws-region: ${{ vars.ECR_REGION }}

          # Login to container repository
          - uses: aws-actions/amazon-ecr-login@v1
            id: login-ecr

          # Build and push a Docker image to the container repository
          - run: |
              docker build -t $REGISTRY/$REPOSITORY:gha-$IMAGE_TAG .
              docker push $REGISTRY/$REPOSITORY:gha-$IMAGE_TAG
            env:
              REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              REPOSITORY: ${{ vars.ECR_REPOSITORY }}
              IMAGE_TAG: ${{ github.sha }}
    ```

## Migrating to short-lived credentials for CircleCI

The container repository module does not currently support short-lived credentials for CircleCI. When support for CircleCI is added, this will be communicated.
