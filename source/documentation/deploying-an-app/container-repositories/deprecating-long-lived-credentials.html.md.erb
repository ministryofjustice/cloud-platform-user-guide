---
title: Deprecating long-lived credentials for container repositories
last_reviewed_on: 2023-05-05
review_in: 3 months
---

# <%= current_page.data.title %>

To improve the security of services running in the Cloud Platform, we are removing the ability to create and use long-lived credentials (such as IAM access keys) from our modules, in favour of short-lived credentials.

You should move to short-lived credentials as soon as you can, as long-lived credentials will be entirely removed from the ECR module in summer 2023 (exact date will be communicated at a later date).

## Migrating to short-lived credentials for GitHub Actions

If you use GitHub Actions to push your Docker image to an ECR repository in Cloud Platform, you will need to update your namespace and your GitHub Actions workflow to use short-lived credentials instead of long-lived credentials.

GitHub Actions has first-class support for [OpenID Connect to authenticate to Amazon Web Services](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services).

To move to short-lived credentials for GitHub Actions, complete the following two steps:

1. Raise and merge a PR that updates the module version and adds the following attributes for your ECR repository, which is typically in `resources/ecr.tf` in your namespace:

    ```hcl
    module "ecr" {
      # update the module version
      source = "...ecr-credentials?ref=5.1.3" # use the latest version

      # set this extra attribute
      oidc_providers = ["github"]

      # if you use one GitHub repository to push to more than one ECR repository,
      # set a prefix each time you call this module so the variable key is unique
      github_actions_prefix = "production"
    }
    ```

    As soon as this PR is merged, you will receive three new variables in GitHub Actions or in your GitHub Actions environments. These will be `ECR_REGION`, `ECR_REPOSITORY`, and `ECR_ROLE_TO_ASSUME`. If you have provided a prefix, these variables will be prefixed.

2. Update your GitHub Actions workflow to utilise short-lived credentials

    This process requires a couple of changes to your workflow:

    ```yaml
    ...

    # add the correct GitHub Actions permissions for tokens
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout

    # in your job, use the official AWS action to fetch credentials
    jobs:
      build:
        runs-on: ...
        steps:
          - uses: actions/checkout@v3
          - uses: aws-actions/configure-aws-credentials@v2
            with:
              role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
              aws-region: ${{ secrets.ECR_REGION }}

          # you may have custom steps to login to ECR,
          # build your Docker image and push it, but
          # you can use the official AWS actions for this:

          - id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1
          - env:
              REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              REPOSITORY: "webops/jakemulley-development"
              IMAGE_TAG: ${{ github.sha }}
            run: |
              docker build -t $REGISTRY/$REPOSITORY:gha-$IMAGE_TAG .
              docker push $REGISTRY/$REPOSITORY:gha-$IMAGE_TAG
    ```

    A working example is available in the [cloud-platform-ecr-oidc-test](https://github.com/ministryofjustice/cloud-platform-ecr-oidc-test/blob/main/.github/workflows/cd.yml) repository, which shows how to use all of the official AWS actions to get your image pushed to ECR using short-lived credentials.

## Migrating to short-lived credentials for CircleCI

The ECR module does not currently support short-lived credentials for CircleCI. When support for CircleCI is added, this will be communicated.
