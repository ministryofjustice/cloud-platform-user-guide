---
title: Deploying a 'Hello World' application to the Cloud Platform
last_reviewed_on: 2019-12-09
review_in: 3 months
---

# <%= current_page.data.title %>


![Deployment Process Diagram](../images/k8s-cluster-application-deployment-process.png)

## Overview

The aim of this guide is to walkthrough the process of deploying an application into the Cloud Platform.

This guide uses a pre-configured ["Hello World" application][rubyapp-github] as an example of how to deploy your own. This application merely returns a static HTML response, and has no dependencies. Later examples will use more representative applications.

The process we will follow consists of the following stages:

* Build a docker image from the demo application
* Tag the image and push it to your ECR
* Edit kubernetes config files
* Apply the config files to make the cluster run our application

The process of building an image and pushing it to an ECR will normally be carried out by a build pipeline. For this initial walkthrough, we will go through these steps manually. Later we will go through an example of setting up a [CircleCI][circleci] job to do this automatically. The steps are similar if you're using other CI/CD tools such as [TravisCI][travisci].

## Prerequisites

This guide assumes the following:

* [Docker][docker] is installed and configured.
* Kubectl is installed and configured (`brew install kubectl` on a Mac with [Homebrew][homebrew] installed)
* AWS CLI is installed (`brew install awscli` on a Mac with [Homebrew][homebrew] installed)
* You have [created an environment for your application][env-create]
* You have [created an Amazon ECR][ecr-setup] to host your docker image

## Step 1 - Build your docker image

* Clone the [demo application](https://github.com/ministryofjustice/cloud-platform-helloworld-ruby-app)

```bash
git clone https://github.com/ministryofjustice/cloud-platform-helloworld-ruby-app
cd cloud-platform-helloworld-ruby-app
```

* Build the docker image

```bash
docker build -t [ECR Team Name]/[ECR Repository Name] .
```

The `ECR Team Name` and `ECR Repository Name` must match the `team_name` and `repo_name` values you entered when you created the ECR via [cloud-platform-environments](https://github.com/ministryofjustice/cloud-platform-environments) Github repository.

You can find them in the file `namespaces/live-1.cloud-platform.service.justice.gov.uk/[YOUR ENVIRONMENT]/resources/ecr.tf`.

### Amazon ECR Terminology

Amazon ECR uses the terms `repository` and `image` in a rather confusing way. Normally, you would think of a docker image repository as holding multiple images, each with a different name, where each image can have multiple tags. Amazon ECR conflates the repository and image - i.e. you can only push images with the same name to a given ECR.

So, if you created your ECR using the team_name `davids-dummy-team` and repo_name `davids-dummy-app`, then you can only push images to the ECR if they are named `davids-dummy-team/davids-dummy-app:[something]`. You are free to change the tag of the image (shown as [something], here), and some teams overload the tag value as a way to store multiple completely different docker images in a single ECR.

## Step 2 - Push the image to your ECR

### Authenticating to your docker image repository

You must authenticate to the docker image repository before you can push an image to it.

To authenticate to your ECR, you will need the `access_key_id` and `secret_access_key` which were created for you when you created your ECR. To retrieve these, see the [this section][access-ecr-credentials] of this guide.

*tl;dr* use this command:

      kubectl -n [namespace_name] get secret [name of your secret] -o yaml

Don't forget to base64 decode the `access_key_id` and `secret_access_key` values before using them.

You can pipe the yaml through [this script][decode-script] in order to decode the values, or you can do the following:

      echo 'your_access_key_id_value' | base64 --decode

Once you have your `access_key_id` and `secret_access_key`, set up an AWS profile using the AWS cli tool.

      aws configure

Supply your credentials when prompted.

This guide assumes you are using these credentials in your `default` AWS profile. If you have used a different name for this AWS profile, please add `--profile [YOUR PROFILE]` to all of the following AWS commands.

### Authenticating with the repository

Use the following command to login to Amazon ECR

      $(aws ecr get-login --no-include-email --region eu-west-2)

Note: The output of the `aws ecr...` command is a long `docker login...` command. Including the `$(...)` around the command executes this output in the context of the current shell

The output of the above should include `Login Succeeded` to confirm you have authenticated to the docker image repository.

These credential are valid for 12 hours. So, if you are working through this example over a longer period, you will have to login again, e.g. the following day.

### Pushing your docker image to the ECR

All of the MoJ Digital docker images are stored within the same Cloud Platform AWS account (cloud-platform-aws).

Your specific ECR will be:

      754256621582.dkr.ecr.eu-west-2.amazonaws.com/[team_name]/[repo_name]

Where `team_name` and `repo_name` are the values from your `ecr.tf` file.

Ensure the Docker image for your application has been built and is stored locally on your machine.

      docker build -t [team_name]/[repo_name] .

Now we need to tag the image so it can be pushed into the correct repository.

      docker tag [team_name]/[repo_name]:latest 754256621582.dkr.ecr.eu-west-2.amazonaws.com/[team_name]/[repo_name]:latest

Finish by running the last command to push the image to your repository.

    docker push 754256621582.dkr.ecr.eu-west-2.amazonaws.com/[team_name]/[repo_name]:latest

## Step 3 - Configure your namespace in the Kubernetes Cluster

To deploy an application to the Cloud Platform, a number of deployment files must first be configured. You can find examples of these in the `kubectl_deploy` directory of the [demo application][rubyapp-github], but you will need to edit your copy to replace some of the values to use your kubernetes cluster environment and docker image.

*Tip:* You can find more deployment config info [in the kubernetes developer documentation](https://kubernetes.io/docs/tasks/run-application/run-stateless-application-deployment/).

### deployment.yaml

```Yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: helloworld-rubyapp
spec:
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 50%
    type: RollingUpdate
  replicas: 4
  template:
    metadata:
      labels:
        app: helloworld-rubyapp
    spec:
      containers:
      - name: rubyapp
        image: 754256621582.dkr.ecr.eu-west-2.amazonaws.com/[team_name]/[repo_name]:latest
        ports:
        - containerPort: 4567
```

Change the image value to refer to the image you pushed to your ECR in the earlier step.

This file tells Kubernetes to run four pods (`replicas: 4`) containing a single container based on a specific docker image from your ECR. We recommend 4 replicas for most components of production services. Your application will be restarted when kubernetes moves workloads from one worker node to another, and having multiple replicas helps to ensure that your service doesn't have any downtime when this happens.

By default, the scheduler will try to [spread your pods across different worker nodes][assign pods to nodes] so that if a worker node dies only a single replica should be affected, leaving the others to handle traffic while the affected pod is automatically replaced.

The `strategy` section means that, when it is moved, the cluster will create a complete new copy of your application first, before it starts killing the pods on the node you're being migrated away from. More information about deployment strategies is available [here][deployment-strategies]

NB: This guidance about replicas doesn't apply for things where you must only have a single instance running (e.g. a background job processor where you must process jobs in FIFO order - if you were to run mutiple instances of that, you might have problems, so a Recreate strategy, with a single replica, might be better).

The `service.yaml` and `ingress.yaml` files make it possible to access your application from the outside world.

### service.yaml

Service files are used to specify port and protocol information for your application and are also used to bundle together the set of pods created by the deployment.

This exposes port 4567 internally to your namespace. i.e. it enables pods and other objects within your namespace to connect to port 4567 of your container.

```Yaml
apiVersion: v1
kind: Service
metadata:
  name: rubyapp-service
  labels:
    app: rubyapp-service
spec:
  ports:
  - port: 4567
    name: https
    targetPort: 4567
  selector:
    app: helloworld-rubyapp
```

The value of `spec/selector/app` must be the same as `spec/template/metadata/labels/app` in the `deployment.yml` file.

*Tip:* You can find more info on service definition in the [kubernetes docs](https://kubernetes.io/docs/tasks/access-application-cluster/service-access-application-cluster/).

### ingress.yaml

Ingress files are to use to define external access to the application.

This creates an [ingress controller](https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/) to enable network connections from outside of the cluster.

Note: Because we are specifying `http`, and we have a `tls` section, this ingress controller will expose port 443, and will redirect connections to port 4567 of the named service.

```Yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: helloworld-rubyapp-ingress
spec:
  tls:
  - hosts:
    - helloworld-rubyapp.apps.live-1.cloud-platform.service.justice.gov.uk
  rules:
  - host: helloworld-rubyapp.apps.live-1.cloud-platform.service.justice.gov.uk
    http:
      paths:
      - path: /
        backend:
          serviceName: rubyapp-service
          servicePort: 4567
```

The value of `serviceName` and `servicePort` must be the same as those specified in the `service.yml` file.

Change the `helloworld-rubyapp` prefix of the `host` string to the value you want to use as the hostname part of the URL on which your application will be available to the world (do not change the `.apps.live-1.cloud-platform...` part).


*Tip:* You can find more info on ingress in the [kubernetes docs][ingress-docs]

## Step 4 - Deploy the application

With all of the deployment files configured, you can now deploy your application to the Cloud Platform.

Start by listing the namespaces on the cluster you are connected to:

      kubectl get namespaces

The list that gets returned should include the one you [created earlier][env-create], here we assume it is called `davids-dummy-dev`. Please change that to whatever your namespace (environment) is called, in all of the following commands.

To deploy your application run the following command. This command assumes that the current directory is the root directory of your working copy of the [demo application][rubyapp-github]. i.e. `kubectl_deploy` points to the directory where the deployment files are stored.

      kubectl apply --filename kubectl_deploy --namespace davids-dummy-dev

You have to specify the namespace you want to deploy to, this should be the namespace of the environment you created.

Confirm the deployment with:

      kubectl get pods --namespace davids-dummy-dev

## Interacting with the application

With the application deployed into the Cloud Platform, there are a few ways of managing it:

* **View pods** - `kubectl get pods --namespace davids-dummy-dev`
* **Check host** - `kubectl get ingress --namespace davids-dummy-dev`
* **Delete application** - `kubectl delete --filename kubectl_deploy --namespace davids-dummy-dev`
* **Shell into container** - `kubectl exec --stdin --tty --namespace davids-dummy-dev [POD-NAME] -- /bin/sh`

For `[POD-NAME]` use the value returned by the `kubectl get pods...` command


*Tip:* You can find more about the `kubectl` command [here](https://kubernetes.io/docs/reference/kubectl/overview/)

You should be able to view the app. at the following URL:

      curl -L https://helloworld-rubyapp.apps.live-1.cloud-platform.service.justice.gov.uk

Don't forget to change `helloworld-rubyapp` to whatever hostname you chose earlier.

You need the `-L` flag to make curl follow the 308 redirect response that it will receive from the ingress controller. If you view the URL in a web browser, it should just work.

If you are wondering why https 'just works', there is some magic behind the scenes whereby a LetsEncrypt SSL certificate is created for you, and applied to your ingress. A future user guide article will describe this in more detail.

## Add HTTP Basic Authentication

The application can be accessed from the internet at:

    https://helloworld-rubyapp.apps.live-1.cloud-platform.service.justice.gov.uk

As per the [guidance for domain names], our application should have some authentication to prevent citizens accidentally mistaking development websites for live government services. Whilst this isn't much of a problem with a 'hello world' site, it could be an issue for sites using the GDS prototype kit, which look exactly like live services. So, let's add [http basic authentication] to our application.

We can do this by amending our [Ingress], which is the kubernetes object that routes traffic to our application from the internet. We'll create an encrypted username and password, and then store that in a [kubernetes secret]. Then, we will update our Ingress to use basic authentication, and tell it where to find the credentials.

### Create the username and password

First we'll use the [htpasswd] program to create a one-way hashed username and password. htpasswd is a system program which should be pre-installed on your computer.

To create a username 'bob' with password 'password123' in a file called 'auth', run the following command:

```bash
$ htpasswd -cb auth bob password123
```

Whatever value you use for your password (which should *not* be 'password123' be sure to make a note of it now - it will not be visible again.

Kubernetes secrets are stored as base64-encoded text strings, so we need to run the 'auth' file through base64 (which should also be pre-installed):

```bash
$ cat auth | base64
```

This will output the string we need to store in our secret. For the purpose of this tutorial, I'm going to use `Ym9iOiRhcHIxJFVXQ1cxWDlvJGt3WDdoMTFZemNYdmVseHE2UFV2VzAK` Please substitute the value you got from the step above, using your own choice of username and password.

Note: only the hash of the password is stored in this string, not the password itself, so it is safe to store this string in a public github repository.

You can now delete the 'auth' file - we don't need it anymore.

### Create the kubernetes secret

Create a file called `kubectl_deploy/secret.yaml` containing the following:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: basic-auth
data:
  auth: Ym9iOiRhcHIxJFVXQ1cxWDlvJGt3WDdoMTFZemNYdmVseHE2UFV2VzAK
```

Remember to substitute your base64-encoded credentials string.

The next time we apply our yaml files to our namespace, this file will create a kubernetes secret called 'basic-auth'. Now we need to configure our Ingress to use it.

### Configure the Ingress

To configure our ingress to use basic authentication, we just need to add a couple of lines to the metadata section of `kubectl_deploy/ingress.yaml`

Replace this:

```yaml
...
metadata:
  name: helloworld-rubyapp-ingress
spec:
...
```

...with this:

```yaml
...
metadata:
  name: helloworld-rubyapp-ingress
  annotations:
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
spec:
...
```

This tells the Ingress what kind of authentication to use, and which kubernetes secret contains the credentials.

### Apply the changes

All that remains is to apply our updated yaml files in almost exactly the same way as we did before, when we deployed the application:

```bash
kubectl apply --filename kubectl_deploy --namespace [your namespace]
```

The only difference is that we are running `kubectl apply` instead of `kubectl create`.

You should see output like this:

```bash
deployment.extensions "helloworld-rubyapp" unchanged
ingress.extensions "helloworld-rubyapp-ingress" configured
secret "basic-auth" created
service "rubyapp-service" unchanged
```

Now, if you reload the browser page showing the 'Hello world' message from the application, you will be prompted to enter the username and password.

[guidance for domain names]: https://ministryofjustice.github.io/technical-guidance/standards/naming-domains/#justicegovuk
[http basic authentication]: https://en.wikipedia.org/wiki/Basic_access_authentication
[kubernetes secret]: https://kubernetes.io/docs/concepts/configuration/secret/
[htpasswd]: https://httpd.apache.org/docs/2.4/programs/htpasswd.html
[Ingress]: https://kubernetes.io/docs/concepts/services-networking/ingress/
[rubyapp-github]: https://github.com/ministryofjustice/cloud-platform-helloworld-ruby-app
[homebrew]: https://brew.sh
[docker]: https://www.docker.com
[circleci]: https://circleci.com
[travisci]: https://travis-ci.org
[ecr-setup]: tasks.html#creating-an-ecr-repository
[access-ecr-credentials]: tasks.html#accessing-the-credentials
[env-create]: tasks.html#creating-a-cloud-platform-environment
[decode-script]: https://github.com/ministryofjustice/cloud-platform-environments/blob/master/bin/decode.rb
[deployment-strategies]: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
[ingress-docs]: https://kubernetes.io/docs/concepts/services-networking/ingress/
[assign pods to nodes]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/