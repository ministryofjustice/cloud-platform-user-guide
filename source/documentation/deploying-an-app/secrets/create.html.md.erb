---
title: Adding a secret to an application using AWS Secrets Manager
last_reviewed_on: 2023-05-20
review_in: 3 months
---

# <%= current_page.data.title %>
Secrets required for an application at runtime can be stored in AWS Secrets Manager. The below guide explains how to
create and store secrets in AWS Secrets Manager and how to access them from your namespace.

## Pre-requisites
- You have a namespace created in Cloud Platform. See [Creating a Cloud Platform Environment][env-create]
- You have enabled access to [AWS console](/documentation/getting-started/accessing-the-cloud-console.html)

1. **Create a AWS Secrets Manager secret**

    Follow the example provided in the [secrets-manager module](https://github.com/ministryofjustice/cloud-platform-terraform-secrets-manager/tree/main/examples)
    to create a secret in AWS Secrets Manager.

    Once the PR is merged and applied, the following resources will be created:
    - A **secret** in AWS Secrets Manager
    - A **SecretStore** in your namespace. 
        This specify which external Secret Provider should be used to retrieve the secret value with the serviceaccount used to access the external API
    - An **ExternalSecret** in your namespace
        This has information on which secret key to retrieve from the external secret provider and the kubernetes secret name to store the secret value in


2. **Store the secret value using AWS console**

    Login to the [AWS console](/documentation/getting-started/accessing-the-cloud-console.html) and navigate to the secret created in the previous step. 

    Click on the secret and then click on "Retrieve secret value"
    
    Enter the secret value. Secrets from `kubernetes_secret` are referred as a key-value pair inside the app. Hence use the format `{"key":"value"}` when storing the value
    
    Then Click on "Save changes"


3. **List the secrets in your namespace**
Once the secrets value has been updated using AWS console, you will see a kubernetes_secret generated with the name and key given for every secret created in Step 1.

You can check if the kubernetes_secret has generated using below command:


```
$ kubectl -n yournamespace get secrets
NAME                                          TYPE                                  DATA      AGE
default-token-hz7z7                           kubernetes.io/service-account-token   3         26d
reference-app-secret                         Opaque                                2      64m
```

4. **Access the secret from your namespace**

    In your deployment file, you can refer the secret as
    
    
    ```yaml
    spec:
    containers:
      - name: django-demo-container
        image: 754256621582.dkr.ecr.eu-west-2.amazonaws.com/cloud-platform-reference-app:1.0.0
        ports:
          - containerPort: 8000
        env:
          - name: <ENV_VARIABLE_NAME>
            valueFrom:
              secretKeyRef:
                name: <SECRET-NAME>
                key: <SECRET-KEY>
    ```

### FAQs

- **kubernetes_secret is not generated?**
  
    If you do not see a kubernetes_secret generated for the any of the secret created in Step 1, check the following:
    1. Is the secret value updated in AWS console?
    2. Is there any error in the external secret resource? You can check this by running
     `kubectl describe externalsecret eks-external-secret-<k8s_secret_name> -n <namespace>`

