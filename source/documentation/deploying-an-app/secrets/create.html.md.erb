---
title: Using AWS Secrets Manager to create and manage application secrets
last_reviewed_on: 2023-06-16
review_in: 3 months
---

# <%= current_page.data.title %>
The guide below explains how to create and manage application secrets in AWS Secrets Manager and how to access them from your namespace.

## Pre-requisites
- You have a [namespace created on the Cloud Platform.](/documentation/getting-started/env-create.html)
- You have enabled [AWS console](/documentation/getting-started/accessing-the-cloud-console.html) access to view AWS resources created in your namespace.

## Setup

1. **Create secret(s) in AWS Secrets Manager**

    The Cloud Platform team have created a [module called cloud-platform-terraform-secrets-manager](https://github.com/ministryofjustice/cloud-platform-terraform-secrets-manager/) which enables users to easily create all resources required to use AWS Secrets Manager. 
    Follow the [example provided](https://github.com/ministryofjustice/cloud-platform-terraform-secrets-manager/tree/main/examples) in the module to create secret(s) in AWS Secrets Manager.

    Once the PR is merged and applied, the following resources will be created:
    - A **secret** entry per secret in AWS Secrets Manager
    - A **SecretStore** in your namespace 
        This specifies the `external-secrets provider will be used to retrieve the secret from AWS Secrets Manager.
        
        ```bash
        kubectl -n <namespace> get secretstores.external-secrets.io
        ```

    - An **ExternalSecret** in your namespace
        There will be an external secrets entry for each Kubernetes secret managed in AWS Secrets Manager.
        
        ```bash
        kubectl -n <namespace> get externalsecrets.external-secrets.io
        ```

2. **Store the secret value using AWS console**

    Login to the [AWS console](/documentation/getting-started/accessing-the-cloud-console.html), search for `Secrets Manager` and navigate to the secret created in the previous step. 

    Click on the secret and then click on `Retrieve secret value`. If this is your first time accessing the new secret, you will see an error `Failed to get the secret value`:

    ![Failed to get secret value](/images/secrets-manager-1.png)
    
    This is expected, since we haven't added a value just yet! 
    
    Next, click on `Set secret value`.

    Secrets from `kubernetes_secret` are referred as a key-value pair inside the app. Hence use the format `{"key":"value"}` when storing the value. You will
    need to set this as a `Plaintext` value initially:

    ![Set secret value](/images/secrets-manager-2.png) 
    
    Then Click on "Save".

    On subsequent viewing and editing of your secret value, you will be able to view and edit it in either the `Key/value` or `Plaintext` tab views.


3. **List secrets in your namespace**

    Once the secrets value has been entered using AWS console, you will see a kubernetes_secret generated with the name and key given for every secret created in Step 1.

    You can check if the kubernetes_secret has generated using below command:


    ```bash
    kubectl -n <namespace> get secrets
    NAME                                          TYPE                                  DATA      AGE
    default-token-hz7z7                           kubernetes.io/service-account-token   3         26d
    reference-app-secret                          Opaque                                2         64m
    ```

    Note: It takes a few minutes before the kubernetes_secret is generated after saving the secret value on the console for the first time. 

4. **Access the secret from your namespace**

    In your deployment file, you can refer the secret as:
    
    
    ```yaml
    spec:
    containers:
      - name: django-demo-container
        image: 754256621582.dkr.ecr.eu-west-2.amazonaws.com/cloud-platform-reference-app:1.0.0
        ports:
          - containerPort: 8000
        env:
          - name: <ENV_VARIABLE_NAME>
            valueFrom:
              secretKeyRef:
                name: <SECRET-NAME>
                key: <SECRET-KEY>
    ```
5. **Setting up alerts for changes to a secret**
   
    The Cloud Platform team have added custom metrics to monitor AWS Secret Manager events using Prometheus. You can view the
    metrics in the [Prometheus UI](https://prometheus.cloud-platform.service.justice.gov.uk/graph?) by searching for `secretsmanager_`

    Below is the example of a PrometheusRule to alert for secretmanager events:

  ```yaml
    apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    metadata:
      namespace: <YOUR_NAMESPACE>
    labels:
      role: 
    name: prometheus-custom-rules-secretsmanager
    spec:
    groups:
      - name: application-rules
      rules:
      - alert: SecretsManagerPutSecretValue
        expr: secretsmanager_put_secret_value_sum{exported_job="secretsmanager", secret_id="arn:aws:secretsmanager:eu-west-2:754256621582:secret:<your-secret-arn>"} > 0
        for: 1m
        labels:
          severity: <severity>
        annotations:
          message: |
            {{ $labels.secret_id }} has had {{ $value }} PutSecretValue operations recently.
            {{ $labels.user_arn }} has had {{ $value }} PutSecretValue operations recently.
          runbook_url: <runbook_url>
          dashboard_url: <dashboard_url>
    
  ```

  These metrics are exported from CloudTrail to Cloudwatch logs, which are then exported to the `live` cluster by being scraped by Prometheus. 
  The scraping interval between each of these components affect the latency of the metrics being viewable in Prometheus..
  Please use this information as a notification of a recent change to your secret and not as a real time alert.


## FAQs

**kubernetes_secret is not generated for the created AWS Secret Manager secret?**

  If you do not see a kubernetes_secret generated for the any of the secret created in Stepa above, check the following:
  
  1. Is the secret value updated in AWS console?
  2. Is there any error in the external secret resource? You can check this by running:

    
```bash
kubectl -n <namespace> describe externalsecrets.external-secrets.io eks-external-secret-<k8s_secret_name> 
```

