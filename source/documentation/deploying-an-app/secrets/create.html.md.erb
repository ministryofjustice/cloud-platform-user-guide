---
title: Adding secrets to an application using AWS Secrets Manager
last_reviewed_on: 2023-06-09
review_in: 3 months
---

# <%= current_page.data.title %>
Secrets required for an application at runtime can be stored in AWS Secrets Manager. The below guide explains how to
create and store secrets in AWS Secrets Manager and how to access them from your namespace.

## Pre-requisites
- You have a namespace created in Cloud Platform. See [Creating a Cloud Platform Environment](/documentation/getting-started/creating-a-cloud-platform-environment.html)
- You have enabled [AWS console](/documentation/getting-started/accessing-the-cloud-console.html) to access AWS resources created in your namespace

## Setup

1. **Create AWS Secrets Manager secrets**

    Follow the example provided in the [secrets-manager module](https://github.com/ministryofjustice/cloud-platform-terraform-secrets-manager/tree/main/examples)
    to create secrets in AWS Secrets Manager.

    Once the PR is merged and applied, for every secret you created, the following resources will be created:
    - A **secret** in AWS Secrets Manager
    - A **SecretStore** in your namespace. 
        This specify which external Secret Provider should be used to retrieve the secret value with the serviceaccount used to access the external API
    - An **ExternalSecret** in your namespace
        This has information on which secret key to retrieve from the external secret provider and the kubernetes secret name to store the secret value in


2. **Store the secret value using AWS console**

    Login to the [AWS console](/documentation/getting-started/accessing-the-cloud-console.html) and navigate to the secret created in the previous step. 

    Click on the secret and then click on `Retrieve secret value`. If this is your first time accessing the new secret, you will see an error `Failed to get the secret value`:

    ![Failed to get secret value](/images/secrets-manager-1.png)
    
    This is expected, since we haven't added a value just yet! 
    
    Next, click on `Set secret value`.

    Enter the secret value. Secrets from `kubernetes_secret` are referred as a key-value pair inside the app. Hence use the format `{"key":"value"}` when storing the value. You will
    need to set this as a `Plaintext` value initially:

    ![Set secret value](/images/secrets-manager-2.png) 
    
    Then Click on "Save".

    On subsequent viewing and editing of your secret value, you will now be able to view it in either the `Key/value` or `Plaintext` tab views.


3. **List the secrets in your namespace**

    Once the secrets value has been updated using AWS console, you will see a kubernetes_secret generated with the name and key given for every secret created in Step 1.

    You can check if the kubernetes_secret has generated using below command:


    ```
    $ kubectl -n yournamespace get secrets
    NAME                                          TYPE                                  DATA      AGE
    default-token-hz7z7                           kubernetes.io/service-account-token   3         26d
    reference-app-secret                         Opaque                                2      64m
    ```

4. **Access the secret from your namespace**

    In your deployment file, you can refer the secret as
    
    
    ```yaml
    spec:
    containers:
      - name: django-demo-container
        image: 754256621582.dkr.ecr.eu-west-2.amazonaws.com/cloud-platform-reference-app:1.0.0
        ports:
          - containerPort: 8000
        env:
          - name: <ENV_VARIABLE_NAME>
            valueFrom:
              secretKeyRef:
                name: <SECRET-NAME>
                key: <SECRET-KEY>
    ```
5. **Setting up alerts for secret changes**
   
    Cloud Platform have added custom metrics to monitor secretmanager events using Prometheus. You can check the
    metrics in the [Prometheus UI](https://prometheus.cloud-platform.service.justice.gov.uk/graph?) by searching for `secretsmanager_`

    Below is the example of PrometheusRule to setup alerts for secretmanager events:

    ```
    apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    metadata:
      namespace: <YOUR_NAMESPACE>
    labels:
      role: 
    name: prometheus-custom-rules-secretsmanager
    spec:
    groups:
      - name: application-rules
      rules:
      - alert: SecretsManagerPutSecretValue
        expr: secretsmanager_put_secret_value_sum{exported_job="secretsmanager", secret_id="arn:aws:secretsmanager:eu-west-2:754256621582:secret:<your-secret-arn>"} > 0
        for: 1m
        labels:
          severity: <severity>
        annotations:
          message: |
            {{ $labels.secret_id }} has had {{ $value }} PutSecretValue operations recently.
            {{ $labels.user_arn }} has had {{ $value }} PutSecretValue operations recently.
          runbook_url: <runbook_url>
          dashboard_url: <dashboard_url>
    
  ```

    These are metrics exported from CloudTrail to Cloudwatch logs which are then exported to the `live` cluster and scraped by Prometheus. 
    The scraping interval between each of the component affects the latency of the metrics.
    Please use this information as a notification of recent changes that has happened in regards to your secret and not as a real time alert.

##FAQs

- **kubernetes_secret is not generated for the created AWS secret manager secret?**
  
    If you do not see a kubernetes_secret generated for the any of the secret created in Step 1, check the following:
    1. Is the secret value updated in AWS console?
    2. Is there any error in the external secret resource? You can check this by running

     ```
     kubectl describe externalsecret eks-external-secret-<k8s_secret_name> -n <namespace>
     ```

