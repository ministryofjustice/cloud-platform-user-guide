---
title: Migrate to the "Live" cluster
last_reviewed_on: 2021-07-20
review_in: 3 months
---

# <%= current_page.data.title %>

## Introduction

This document intends to act as a guide to help you migrate your namespace from "Live-1" to "Live".

### Terms used in this document

There are some confusing names and terms used in this document. Here are a few:

- "Live-1" = The name of the current Cloud Platform (Kubernetes) cluster your namespace is deployed to.

- "Live" = The name of a new Cloud Platform (EKS) cluster that you'll need to migrate to.

## Why should you migrate

The Cloud Platform is a Kubernetes cluster deployed using a tool named kOps. When the Cloud Platform was conceived in 2017, Kubernetes management tools such as EKS (Elastic Kubernetes Service from AWS) and GKE (Google Kubernetes Engine) were in their infancy. An architecture decision record (ADR) was created with the understanding and acceptance of the extra management overhead and slightly slower release times. Since then, EKS has matured to a state where the benefits of running a multi-tenant cluster without the overhead of maintaining the control plane has become extremely attractive. If you wish to read more, please see this ADR.

## What are you migrating

You will be migrating your Cloud Platform namespace, all permissions and resources in your namespace [directory](). This doesn't include AWS resources.

## Prerequisites for migration

There are just a few things you need to ensure before you migrate between clusters.

- Ensure your containers are "stateless". During the transition between clusters, your pods will be running simultaneously between "Live" and "Live-1". Any state that your containers (inside the pod) store on disk or persistent volume (such as EBS) will not be copied to the new cluster. Using Elasticache for session variables storage will avoid web users being logged off when traffic gets routed to the other cluster.

- Check that multiple copies of your app can communicate simultaneously with AWS resources. These AWS resources will be shared between clusters. For example, your RDS instance will accept connections from pods in "Live" and "Live-1".

If this is a concern or you'd like to check in advance, please feel free to contact the Cloud Platform team.

## How to migrate

The rest of this document contains the steps required to perform the migration. This is very much a work in progress, so please leave feedback if you've either struggled to understand a step or feel it could be clarified further.

## Step 1 - Agree a time to perform the migration

During the process of migration high velocity apps will be unable to deploy to "Live-1". You should speak to your team and agree a time and date to attempt to migrate your namespace. It's also recommended that you get familiar with migrating a non-production namespace before attempting prod.

## Step 2 - Amend your ingress resource

To ensure that you can send traffic to both clusters simultaneously you must add an annotation to your `ingress` resource to allow traffic weighting.

This looks as follows:

```yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/set-identifier: <ingress-name>-<environment-name>-<colour>
    external-dns.alpha.kubernetes.io/aws-weight: "50"
```

(Note - Please change the `ingress-name` and `environment-name` values in the above example, you can get the `environment-name` value from your namespace label "cloud-platform.justice.gov.uk/environment-name". The `colour` should be `blue` for ingress in live-1 and `green` for ingress in EKS `live` cluster)

The idea behind the annotation is to control where the traffic is going. Using the above example 50% of the traffic will be sent to the ingress in the "Live-1" cluster. In a later step, we will create another resource in the "Live" cluster that will weight the traffic between the two clusters.

## Step 3 - Migrate your namespace environment to "live"

To migrate your namespace from "live-1" to "live" you'll need to copy your namespace directory to a new location in the [cloud-platform-environments][env-repo] repository. To do this, ensure your [cloud-platform-cli][cli] is up to date. Then you perform the following:

- Clone a copy of the [cloud-platform-environments][env-repo] repository and create a branch: `git clone git@github.com:ministryofjustice/cloud-platform-environments.git`

- Change directory to your namespace in "live-1": `cd namespaces/live-1.cloud-platform.service.justice.gov.uk/<namespace>`

- Use the cloud-platform cli command: `cloud-platform environment migrate` to migrate your namespace.

- Commit changes and create a pull request.

The migrate command checks a number of conditions before moving the namespace. If a condition returns true an error will be displayed pointing you to a user-guide entry.

Conditions:

- If you have an Elasticsearch module: the `cloud-platform environment migrate` command will automatically make the change outlined in this article. No action is required.

- If you have a ServiceAccount module: Please get in touch with someone in the team at #ask-cloud-platform.

- If you use Kiam for [cross account IAM roles][iam-infra]: You'll need to use [IRSA][irsa] in EKS. These [roles][iam-infra] need to be defined inside  the [environments repo][env-repo] using the guidence [here][irsa-cross-account].

If you want to skip any warnings and continue anyway, the cli has a `--skip-warnings` flag you can enable.

## Step 4 - Authenticate to the "Live" cluster

Grab a new set of credentials from [login.live.cloud-platform.service.justice.gov.uk][authenticate-to-cluster].

## Step 5 - Add a new ingress resource

Create a new Ingress from the copy of "live-1" Ingress. Amend the `aws-weight` annotation to "0", this will not send any traffic to "live". In the later step, we start sending real traffic by tweaking external-dns ingress annotation (`aws-weight`)

```yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/set-identifier: <ingress-name>-<environment-name>-<colour>
    external-dns.alpha.kubernetes.io/aws-weight: "0"
```

(Note - Please change the `colour` to `green` for ingress in live)

## Step 6 - Create a new step to your deployment pipeline

There are multi ways people are deploying their application, this guide will cover two of them:

### Deploy with GitHub Actions

For teams using Github Actions as continuous deployment following [user guide][gh-actions], update your service account module in the “cloud-platform-environments” repo to push secrets with different names for [example][sa-example]. Use the new secrets to authenticate to the "live" cluster. You can either create separate GitHub action or add additional steps to your existing GitHub action to deploy in the "live" cluster


### Deploy with CircleCI

For teams who use circleci for continuous deployment, you will see a new CircleCI service account created in "live" cluster after the namespace directory is copied from "Live"-1. This serviceaccount is created by either the serviceaccount.yaml or serviceaccount.tf file in your namespace folder.

Once the service account is created, you can grab the ca.crt, token and cluster_name, to authenticate to the "live" cluster.

You can use a separate pipeline to deploy in "live" or amend the existing pipeline to add additional steps to authenticate and deploy to "live"

Click [HERE](https://github.com/ministryofjustice/cloud-platform-reference-app/blob/main/.circleci/config.yml) for an example of a circleci config.yml file that builds an image, authenticates and deploys an application to both the "live-1" and "live" clusters in the same workflow. The application is deployed using [Kubernetes manifest files](https://github.com/ministryofjustice/cloud-platform-reference-app/tree/main/deploy/kubectl) and include a [unique ingress identifier](https://github.com/ministryofjustice/cloud-platform-reference-app/blob/73b021b36a0cfee9b7363a119db92597e398641c/deploy/kubectl/live-1/ingress.yaml#L6) for each cluster and a [weighting](https://github.com/ministryofjustice/cloud-platform-reference-app/blob/73b021b36a0cfee9b7363a119db92597e398641c/deploy/kubectl/live-1/ingress.yaml#L7) of 50/50 as mentioned in `Step 2 - Amend your ingress resource` of this document. 

## Step 7 - Trigger your pipeline

Trigger your application pipeline. This is normally done manually or by a push to branch.

## Step 8 - Test your application

Test your application is working on the new cluster by performing manual tests, or if you configured an automated test, run the complete test suite to cover end to end functionality of your application.
 
As you will start with the migration of your dev namespaces, test your application in your development namespace by creating a new host in "live" and also with your existing host(same hostname as in live-1) using external-dns ingress annotation (`aws-weight`)

## Step 9 - Start sending real traffic

Traffic flow is controlled by tweaking external-dns ingress annotation (`aws-weight`), which is used to determine the proportion of traffic sent to that ingress.
Initially it is not expected to have any traffic because live’s ingresses have `external-dns.alpha.kubernetes.io/aws-weight: "0"`. 
For example, by setting this value to 5, route53 will send 5% of real traffic to the application.

It is advised to send between 1-10% of the traffic to the live cluster. Once the traffic flows into the live cluster and the application behaves as expected, 
you could send 100% of the traffic into live cluster and 0% into live-1 cluster.

NOTE: If results are not successful within the live cluster, rollback the annotations to their initial state (0% weight).

## Step 10 - Cleanup old "Live-1" namespace

Once you have successfully migrated to the "Live" cluster you can remove your namespace from the["Live-1" directory][live-1-folder].This is as simple as running the command :


```bash
rm -rf ./namespaces/live-1.cloud-platform.service.justice.gov.uk/<my-namespace-name>
```

The deletion will need to be written back to the `main` branch. Please create a PR and have `Deletion of NS due to migration to live cluster` in the description. 

## Links for the new cluster

Prometheus: [https://prometheus.live.cloud-platform.service.justice.gov.uk](https://prometheus.live.cloud-platform.service.justice.gov.uk)

AlertManager: [https://alertmanager.live.cloud-platform.service.justice.gov.uk](https://alertmanager.live.cloud-platform.service.justice.gov.uk)

Grafana: [https://grafana.live.cloud-platform.service.justice.gov.uk](https://grafana.live.cloud-platform.service.justice.gov.uk)

Kibana:
[https://kibana.cloud-platform.service.justice.gov.uk/_plugin/kibana](https://kibana.cloud-platform.service.justice.gov.uk/_plugin/kibana/app/kibana#/home?_g=())

Authenticating to the Cluster: [login.live.cloud-platform.service.justice.gov.uk][authenticate-to-cluster]

## How to roll back

## Troubleshooting

### ttlSecondsAfterFinished 

TTL Controller for Finished Resources(ttlSecondsAfterFinished) is not available in EKS yet. For users who use ttlSecondsAfterFinished to clear completed jobs, should setup [Jobs History Limits][job-history-limit] using failedJobsHistoryLimit and successfulJobsHistoryLimit.
## Feedback welcome

[irsa]: https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html
[kiam]: https://github.com/uswitch/kiam
[es-example]: https://github.com/ministryofjustice/cloud-platform-terraform-elasticsearch/blob/main/example/elasticsearch.tf#L34-L36
[iam-infra]: https://github.com/ministryofjustice/cloud-platform-infrastructure/tree/main/terraform/cross-account-IAM
[irsa-cross-account]: /documentation/other-topics/access-cross-aws-resources-irsa-eks.html#use-iam-roles-for-service-accounts-to-access-resources-in-a-different-aws-account
[env-repo]: https://github.com/ministryofjustice/cloud-platform-environments/
[job-history-limit]: https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/#jobs-history-limits
[ns-changes]: /documentation/other-topics/migrate-to-live.html#namespace-resource-changes
[gh-actions]: /documentation/deploying-an-app/github-actions-continuous-deployment.html#continuous-deployment-of-an-application-using-github-actions
[sa-example]: https://github.com/ministryofjustice/cloud-platform-environments/blob/main/namespaces/live-1.cloud-platform.service.justice.gov.uk/justicedata-prod/resources/serviceaccount.tf#L4-L7
[authenticate-to-cluster]: https://login.live.cloud-platform.service.justice.gov.uk
[live-1-folder]: https://github.com/ministryofjustice/cloud-platform-environments/tree/main/namespaces/live-1.cloud-platform.service.justice.gov.uk
[cli]: https://github.com/ministryofjustice/cloud-platform-cli
