---
title: Rotating tokens and keys
last_reviewed_on: 2022-11-28
review_in: 3 months
---

# <%= current_page.data.title %>


## Overview

Below is the guidance for rotating the tokens and keys that are set as environment variables for your application container or your automated deployment pipeline. 
This guide covers only secrets provided by the Cloud Platform system (your application may have other secrets too)

### Serviceaccount tokens
  Delete the secrets related to the serviceaccount credentials that are used in automated deployment pipeline like circleCI or github Actions. The secret name mostly start with `circleci-token-XXXX`

    ```bash
    $kubectl get secrets -n <yournamespace>
    circleci-token-XXXXX                                       kubernetes.io/service-account-token   3      279d
    default-token-jgtdz                                        kubernetes.io/service-account-token   3      279d
    es-snapshot-bucket                                         Opaque                                2      144d
    $
    $kubectl delete secret circleci-token-XXXXX -n <yournamespace>

  After the secret is deleted the replacement secret is generated immediately. Check the age of the newly generated secret to confirm. 
  
  Decode the secret using `cloud-platform decode-secret -n <yournamespace> -s circleci-token-XXXXX` to use it in your deployment pipeline.

### AWS credentials
  [Ask the Cloud Platform team](/documentation/reference/getting-help.html) to rotate the credentials related to AWS resources such as ECR, RDS etc., which have been [created by terraform](/documentation/deploying-an-app/add-aws-resources.html). 
  The team will run the instructions from the runbook [Rotate User AWS Credentials](https://runbooks.cloud-platform.service.justice.gov.uk/rotate-user-aws-credentials.html#rotate-user-aws-credentials) to regenerate the AWS credentials. 
  This will recreate the kubernetes-secret in the same name and the values are updated automatically in the `mountPath` which the pod consumes.

### Certificate tls keys

  Delete the secrets related to the certificates that are used to create the [certificate resource][obtain-certicate]. The [secret name][secretName] will be shown in your certificate manifest file.

    ```bash
    $kubectl get secrets -n <yournamespace>
    c100-application-tls-long-domain      kubernetes.io/tls                     2      325d
    c100-application-tls-short-domain     kubernetes.io/tls                     2      325d
    circleci-token-msrhd                  kubernetes.io/service-account-token   3      17d
    default-token-pztpp                   kubernetes.io/service-account-token   3      325d
    $
    $kubectl delete secret c100-application-tls-long-domain -n <yournamespace>

  After the secret is deleted the replacement secret is generated immediately. This will not change the duration of the certificate or the renew process.

  You will receive below error message while the new secret is created, it might incur some service downtime (in tests, deleting a secret of a certificate resulted in approx. 7 seconds downtime)

    ```bash
    SSL: no alternative certificate subject name matches target host name 'xxxxxxx.service.justice.gov.uk'
    failed to verify the legitimacy of the server and therefore could not establish a secure connection to it.

  ### AWS RDS DB password

  Rotate RDS DB password using the [terraform module][terraform module]. You will need to change your `resources/rds.tf` file and add a new variable "db_password_rotated_date" in the terraform code as below and update the "dd-mm-yyyy" value to the current date.

    ```
      db_password_rotated_date = "dd-mm-yyyy"
    ```

  > Note: Make sure you are using the latest version of the [RDS module][rds-module-version].

  Applying this will recreate the password for an RDS instance, and the database_password stored as Kubernetes secrets in your namespace will be updated with the new one.


  You can verify the database password change by decoding its rds secret contents using the [cloud platform cli]:

  ```
  cloud-platform decode-secret -n [your namespace] -s [rds secret name]
  ```

  Here is a redacted example:

  ```
  cloud-platform decode-secret -n dstest -s rds-instance-output

  {
      "apiVersion": "v1",
      "data": {
          "database_password": "new-password",
          "database_username": "xxxxxxxxxx",
          "url": "postgres://xxxxxxxxxx:new-password@cloud-platform-1111111111111111.cdwm328dlye6.eu-west-2.rds.amazonaws.com:5432/db2axxxxxxxxxxxxxx"
      },
      "kind": "Secret",
      "metadata": {
          "name": "rds-instance-output",
          "namespace": "dstest",
      },
      "type": "Opaque"
  }
  ```

  You will need to delete all pods in the corresponding namespace to allow new pods to be created, which will pick up the new DB password from the kubernetes secret.

  It is possible that applications might experience downtime if, for example, a pod which was launched with the old password drops a DB connection and tries to open a new one (which will fail, because the password is no longer valid).
  Similarly, a pod launched with the old password (e.g. a cron job), which then waits to open a DB connection will fail to connect if the password has been replaced since the pod was launched. In the case of cron jobs, these pods
  should just fail and be relaunched successfully.


  [obtain-certicate]: /documentation/other-topics/custom-domain-cert.html#obtaining-a-certificate
  [secretName]: https://github.com/ministryofjustice/cloud-platform-environments/blob/main/namespaces/live.cloud-platform.service.justice.gov.uk/c100-application-production/certificate.yaml#L7
  [cloud platform cli]: ../getting-started/cloud-platform-cli.html
  [terraform module]: https://github.com/ministryofjustice/cloud-platform-terraform-rds-instance
  [rds-module-version]: https://github.com/ministryofjustice/cloud-platform-terraform-rds-instance/releases