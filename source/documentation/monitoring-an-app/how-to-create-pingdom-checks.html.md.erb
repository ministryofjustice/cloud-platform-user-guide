---
title: Creating Pingdom checks
last_reviewed_on: 2023-05-12
review_in: 3 months
---

# <%= current_page.data.title %>


## Overview
[Pingdom](https://my.pingdom.com) is a global performance and availability monitor for your web application. The aim of this document is to provide you with the necessary information to create Pingdom checks via the [cloud-platform-environments](https://github.com/ministryofjustice/cloud-platform-environments) pipeline, and then send failing checks to a Slack channel of your choosing.

## Prerequisites
This guide assumes the following:

* You have [created a namespace for your application][env-create]
* You have a slack channel to send alerts to

## Create a Pingdom check
Add the below 2 files in in the resources directory of your namespace in your [cloud-platform-environments](https://github.com/ministryofjustice/cloud-platform-environments/tree/main/namespaces/live.cloud-platform.service.justice.gov.uk) repository. You can define the conditions of your check using the resources outlined in the [Terraform community provider](https://github.com/DrFaust92/terraform-provider-pingdom). Here's a working example of a [basic check](https://github.com/ministryofjustice/cloud-platform-environments/blob/main/namespaces/live.cloud-platform.service.justice.gov.uk/claim-criminal-injuries-compensation-uat/resources/pingdom.tf).

1. Add the below code to the `required_providers` block in `versions.tf`

    ```hcl
        pingdom = {
          source  = "DrFaust92/pingdom"
          version = "~> 1.3.1"
        }
    ```
    A working example of `versions.tf` with pingdom included will look like this.

    ```hcl
    terraform {
      required_version = ">= 1.2.5"
      required_providers {
        aws = {
          source = "hashicorp/aws"
        }
        kubernetes = {
          source = "hashicorp/kubernetes"
        }
        pingdom = {
          source  = "DrFaust92/pingdom"
          version = "~> 1.3.1"
        }
      }
    }
    ```
2. Add a `pingdom.tf` file 

    ```hcl
    provider "pingdom" {
    }

    resource "pingdom_check" "claim-criminal-injuries-compensation-uat" {
      type                     = "http"
      name                     = "cica - uat - cloud-platform - claim"
      host                     = "uat.claim-criminal-injuries-compensation.service.justice.gov.uk"
      resolution               = 1
      notifywhenbackup         = true
      sendnotificationwhendown = 6
      notifyagainevery         = 0
      url                      = "/"
      encryption               = true
      port                     = 443
      tags                     = "businessunit_platforms,application_prometheus,component_healthcheck,isproduction_true,environment_uat,infrastructuresupport_platforms"
      probefilters             = "region:EU"
    }

    ```

  **Note**: You'll need to include the `provider "pingdom"` and `terraform` blocks either in this file or in a `main.tf` file.
 

  You can define the conditions of your check using the resources outlined in the [Terraform community provider](https://github.com/DrFaust92/terraform-provider-pingdom).

  Here's a working example of a [basic check](https://github.com/ministryofjustice/cloud-platform-environments/blob/main/namespaces/live.cloud-platform.service.justice.gov.uk/claim-criminal-injuries-compensation-uat/resources/pingdom.tf).

  This basic check simply checks that the host/url (in this case; uat.claim-criminal-injuries-compensation.service.justice.gov.uk) returns a 200 every minute (resolution = 1 minute). 
  When six (sendnotificationwhendown = 6) consecutive checks fail it triggers an alarm. 

  [This](https://github.com/DrFaust92/terraform-provider-pingdom#pingdom-check) page explains all the attributes used in the check.

  All resources, including Pingdom checks **must** be tagged and adhere to the technical guidance outlined [here](https://ministryofjustice.github.io/technical-guidance/documentation/standards/documenting-infrastructure-owners.html). Ensure your check has appropriate tags before submitting a pull request.

Once reviewed and merged to main, the [Apply Pipeline](/documentation/other-topics/apply-pipeline.html) will create your check in the MoJ Pingdom account.

### Adding Slack notification
You can enable the option to send a failing alert to Slack via a webhook by simply adding Pingdom integration id. You need administrator permissions to manage the mojdt [Pingdom Slack](https://slack.com/apps/A0F814AV7-pingdom?next_id=0) webhook and then [Pingdom](https://my.pingdom.com) to create the integration id.

The Cloud Platform team can do this on your behalf. Create a ticket requesting a Pingdom integration id with the following information:

  - team name
  - application name
  - slack channel

The team will provide you with an integration id, following the steps outlined [here](https://runbooks.cloud-platform.service.justice.gov.uk/images/create-a-pingdom-integration-id.html).

You can now add `integrationids` to your `pingdom.tf`. Appending the example above, your check will now appear as follows (assuming you were given 1000 as the integration id):

```hcl
provider "pingdom" {
}

resource "pingdom_check" "claim-criminal-injuries-compensation-uat" {
  type                     = "http"
  name                     = "cica - uat - cloud-platform - claim"
  host                     = "uat.claim-criminal-injuries-compensation.service.justice.gov.uk"
  resolution               = 1
  notifywhenbackup         = true
  sendnotificationwhendown = 6
  notifyagainevery         = 0
  url                      = "/"
  encryption               = true
  port                     = 443
  tags                     = "businessunit_platforms,application_prometheus,component_healthcheck,isproduction_true,environment_uat,infrastructuresupport_platforms"
  probefilters             = "region:EU"
  integrationids           = [1000]
}
```

[env-create]: /documentation/getting-started/env-create.html#creating-a-cloud-platform-environment
